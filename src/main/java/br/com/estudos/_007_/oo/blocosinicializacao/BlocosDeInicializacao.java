package br.com.estudos._007_.oo.blocosinicializacao;

public class BlocosDeInicializacao {
	//Etapas da inacializa√ß√£o de um objeto
	// 1 - Bloco de inicializa√ß√£o estatico √© executado antes de qualquer coisa e s√≥ roda uma vez.
	// 2 - Aloca espa√ßo na mem√≥ria para o objeto que ser√° criado
	// 3 - Cada atributo de classe √© inicializado com seus valores default ou valores explicitos
	// 4  - Bloco de inicializa√ß√£o (padr„o ou de instancia) sempre executado (roda antes do construtor)
	// 5 - o construtor √© executado
	
	private int [] parcelas;
	
	private static int [] bicicletas;
	
	//Blocos de inicializa√ß√£o estaticos s√£o executados apenas uma ves e n√£o acada instancia criada
	//Blocos de inicializa√ß√£o estatico roda antes que os clocos de inicializa√ß√£o normais
	static {
		bicicletas = new int[]{1, 2, 3, 4}; 
	}
	
	
	//conhecido como bloco de inicializaÁ„o de instancia (padr„o)
	//para criar um bloco de inicializa√ß√£o vc abre e fecha chaves
	//boas praticas indicam colocar este bloco antes do construtor.. por√©m se vc colocar em outro lugar ele vai ser executado antes de qualquer maneira
	{
		System.out.println("Bloco de inicializa√ß√£o");
		parcelas = new int[]{1,2,3,4,5,6,7,8,9};
	}
	
	//Blocos de inicializa√ß√£o estaticos
	
	
	
	private void BlocosDeInicializacao() {
		System.out.println("Construtor1");
		for(int parce: this.getParcelas()) {
			System.out.println(parce);
		}
		
	}
	
	public int[] getParcelas() {
		return parcelas;
	}

	public void setParcelas(int[] parcelas) {
		this.parcelas = parcelas;
	}

	
	
	
	
	public static void main(String[] args) {
		System.out.println("Antes de Instanciar");
		BlocosDeInicializacao b = new BlocosDeInicializacao();
		System.out.println("Depois de Instanciar");
		
		for(int parce: b.getParcelas()) {
			System.out.println(parce);
		}
		
	}
}
