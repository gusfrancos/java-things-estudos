package br.com.estudos._007_.oo.modifiers;

public class ModifiersThings {
	
	/*Os modificadores de acesso s„o padroes de visibilidade de acessos √†s classes, atributos e m√©todos. 
	 * Esses modificadores s√£o palavras-chaves reservadas pelo Java, ou seja, palavras reservadas n√£o podem 
	 * ser usadas como nome de m√©todos, classes ou atributos.
	 * Como boas pr√°ticas (best practices) do Java, na maioria das declara√ß√µes de vari√°veis de inst√¢ncia s√£o definidos
	 *  os seus atributos com a palavra-chave private, para garantir a seguran√ßa de altera√ß√µes acidentais, 
	 *  sendo somente acess√≠veis atrav√©s dos m√©todos. Essa a√ß√£o tem como efeito ajudar no encapsulamento dos dados, 
	 *  preservando ainda mais a seguran√ßa e a aplica√ß√£o de programa√ß√£o orientada a objetos do Java.
	 *  Ver exemplo  ModifiersBestPratice.java
	 *  
	 *  
	 *  N√£o √© permitida a combina√ß√£o entre private e var
	 *  private var x = 10;
	 *  
	 *  
	 *  
	 *  The correct order  of retritividade:
public < protected < package (or default) < private
*/
	
	//Modificadores de acesso
	// private (somente para seus m√©todos e atributos)
	/*  Os membros da classe definidos como n√£o podem ser acessados ou usados por nenhuma outra classe. 
	 * Esse modificador n√£o se aplica √†s classes, somente para seus m√©todos e atributos. 
	 * Esses atributos e m√©todos tamb√©m n√£o podem ser visualizados pelas classes herdadas. *
	 */
	
	// public (para classes, m√©todos e atributos) 
	/*Uma declara√ß√£o com o modificador public pode ser acessada de qualquer lugar e por qualquer entidade 
	 * que possa visualizar a classe a que ela pertence.
	 */
	
	// Modificador padr√£o (default) (sem modificador explicito): conhecido com friendly: (para classes, m√©todos e atributos)
	/* A classe e/ou seus membros s√£o acess√≠veis somente por classes do mesmo pacote, na sua declara√ß√£o 
	 * n√£o √© definido nenhum tipo de modificador, sendo este identificado pelo compilador.
	 */

	//protected (somente para seus m√©todos e atributos)
	/* O modificador protected torna o membro acess√≠vel √†s classes do mesmo pacote ou atrav√©s de heran√ßa, 
	 * seus membros herdados n√£o s√£o acess√≠veis a outras classes fora do pacote em que foram declarados.
	 */
	
	// static
	/* √â usado para a cria√ß√£o de uma vari√°vel que poder√° ser acessada por todas as inst√¢ncias de objetos desta 
	 * classe como uma vari√°vel comum, ou seja, a vari√°vel criada ser√° a mesma em todas as inst√¢ncias e quando 
	 * seu conte√∫do √© modificado numa das inst√¢ncias, a modifica√ß√£o ocorre em todas as demais. E nas declara√ß√µes 
	 * de m√©todos ajudam no acesso direto √† classe, portanto n√£o √© necess√°rio instanciar um objeto para acessar 
	 * o m√©todo.
	 * 
	 * //uma variavel estatica √© um membro da classe e se vc alterar o valor dela em uma objeto
		// todas as instancias da classe observar√° o valor modificado
	 */
	
	// abstract (s√≥ em classes e m√©todos)
	/* Esse modificador n√£o √© aplicado nas vari√°veis, . 
	 * Uma classe abstrata n√£o pode ser instanciada, ou seja, n√£o pode ser chamada pelos seus construtores. 
	 * Se houver alguma declara√ß√£o de um m√©todo como abstract (abstrato), a classe tamb√©m deve ser marcada 
	 * como abstract.
	 * Uma classe abstrata pode ser extendida por uma classe abstrata ou por uma concreta
	 * 
	 */
	
	// final
	/* Quando √© aplicado na classe, n√£o permite estende-la, 
	 * nos m√©todos impede que o mesmo seja sobrescrito (overriding) 
	 * na subclasse, e 
	 * os valores de vari√°veis do tipo primitivo n√£o podem ser alterado depois que j√° tenha sido atribu√≠do um valor.
	 * As v√°riaveis do tipo reference ncom modificador final n√£o podem ter uma nova referencia mas podemos
	 * alterar os valores dentro do objeto
	 * 
	 */
	
	//Uma interface pode ser extendida por outra interface
	//uma interface n√£o pode ser extendida por outra classe
	//qualquer classe, inclusive uma abstrata pode implementar uma interface
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
